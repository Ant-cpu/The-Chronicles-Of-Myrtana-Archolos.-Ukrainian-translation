Курс молодого бійця по git

В цій інструкції я не буду пояснювати як працює git, кому цікаво - для цього є офіційна документація(українською)
https://git-scm.com/book/uk/v2
А також непоганий "тур по основах git"(також українською)
https://githowto.com/uk

Тут я коротко опишу як його встановити, налаштувати, які команди нам пригодяться в роботі, і в якому порядку їх запускати.

1. Встановлення. На тому ж git-scm багато води, і кілометрова стаття, з якої нам потрібне тільке одне посилання
https://git-scm.com/download/win
В процесі установки не забудьте поставити галочки навпроти Git Bash here і Git GUI here. Далі просто натискаємо "Далі".

2. Налаштування. Після встановлення натискаємо правою кнопкою миші по вільному місцю у будь-якій теці(можна і на робочому столі) і обираємо пункт Git Bash here. Запускається оболонка для командного рядка гіта, подібна до тої, яка є у Linux. В подальшому ми працюватимемо або з нею, або з графічним інтерфейсом(GUI), який запускається аналогічно через Git GUI here. Але початкові налаштування можна зробити лише через Git Bash. По черзі копіюємо туди такі команди, вставляючи свій email і логін git:

git config --global user.name "Your Name"
git config --global user.email "your_email@whatever.com"
git config --global core.autocrlf true
git config --global core.safecrlf warn

(доречі, Ctrl+C і Ctrl+V тут не працює, замість них тут Ctrl+Insert і Shift+Insert, або ПКМ->Copy і ПКМ->Paste)

3. Скачування репозиторію. У теці, у якій ми хочемо створити робочий проєкт запускаємо Git Bash вищевказаним способом. Копіюємо команду

git clone git@github.com:Ant-cpu/The-Chronicles-Of-Myrtana-Archolos.-Ukrainian-translation.git -b ArcholosOmegaT Archolos_Folder

Ця команда скачає гілку ArcholosOmegaT з репозиторію, розміщеному по вказаному ssh-ключу, і розпакує її у теці Archolos_Folder, назву якої можна вказати довільну, або перейменувати пізніше. В цій гілці знаходиться тека з проєктом OmegaT, і налаштування для гіта.

4. Закидаємо файли для перекладу. Як я вже писав, все що всередині теки ru або pl (теку Scripts, і інші файли) закидаємо у теку source, що знаходиться у теці проєкту, яку ми скачали разом з репозиторієм.

5. Перед початком роботи наведу кілька необхідних команд і понять:

Робоча директорія — файлова система проєкту (ті файлы, з якими ми працюємо);
Індекс — список файлів і директорій, які відслідковує git. Проміжне сховище внесених змін (редагування, видалення файлів);
Директорія .git — всі дані контролю версій цього проєкту (вся исторія розробки: комміти, гілки, теги та ін.);
Комміт — «збереження» (зберігає набір змін, зроблений в рабочій директорії з моменту попереднього комміту). Комміт незмінний, його не можна відредагувати, зате можна зробити новий.

git pull
Скачує усі нові комміти з репозиторію, якщо такі є, і інтегрує їх в нашу директорію

git add .
Фіксує УСІ зміни у файлах, які будуть внесені до наступного коміту. Тобто, вносить їх до індексу

git reset
Видаляє з індексу всі внесені в нього зміни. Файли не чіпає

git status
Показує усі проіндексовані та непроіндексовані зміни у файлах

git commit -m "Переклав Mission.d.json і Written.d.json"
Створює новий комміт з проіндексованих файлів, і додає до нього заголовок. Те ж саме, що ми робили у браузері, тільки одразу в багато файлів, і локально.

git push
Надсилає створений комміт/комміти у віддалений репозиторій, в гілку, яка привязана до поточної гілки

git push origin ArcholosOmegaT
Надсилає створений комміт/комміти у віддалений репозиторій, в гілку ArcholosOmegaT

git log --oneline
Виводить всю історію коммітів, без подробиць. Закрити на клавішу Q

gitk
Запускає окрему програму, де можна детально подивитись зміни, внесені кожним комітом. gitk& запустить її окремим процесом, не приязаним до консолі

6. Алгоритм роботи. Ідеальний алгоритм роботи, яким його бачу я:

Запускаємо Git Bash в робочій директорії. Там де ArcholosOmegaT, .gitattributes, .gitignore, README.md ...
git pull (Обов'язково завантажуємо нові зміни)
Запускаємо OmegaT, обираємо проєкт, скачаний з репозиторію, обираємо файл для перекладу(Ctrl+L), працюємо.
Натискаємо "Проєкт -> Зберегти" або Ctrl+S
Натискаємо "Проєкт -> Закрити" або Ctrl+Shift+W
Натискаємо "Проєкт -> Вийти" або Ctrl+Q
Запускаємо Git Bash знову, якщо закрили
git add .
git commit -m "Коротко, що зробили"
git push
Кінець.

Поради
Інколи можна перевіряти стан проіндексованих файлів командою git status. 
Останні три команди можна виконати кнопками через Git GUI, який запускається аналогічно до Git Bash. Проте я не знайшов там команди git pull, без якої ніяк.
В OmegaT "Налаштування -> Параметри... -> Командна робота" можна вказати ім'я, яке дописуватиметься до внесених змін. 
Я вже описував налаштування OmegaT в іншому гайді, тож після відкриття файлу буде видно, перекладався він раніше, чи ні.
Я вже писав у README.md, ідея полягає у синхронізації одного файлу - project_save.tmx, що у теці omegat. Тож проблеми можуть виникнути тільки якщо ми намагатимемось вносити в нього зміни одночасно, а не послідовно. В таких випадках припиняти роботу і відразу писати Глібові, це можна розрулити.
